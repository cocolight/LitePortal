name: Build Native Executables

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  pkg:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: node22-linux-x64
            ext: ''
            artifact_name: server-linux
          - os: macos-latest
            target: node22-macos-x64
            ext: ''
            artifact_name: server-macos
          - os: windows-latest
            target: node22-win-x64
            ext: .exe
            artifact_name: server-windows

    runs-on: ${{ matrix.os }}

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # 3. 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: |
            frontend/pnpm-lock.yaml
            backend/pnpm-lock.yaml

      # 4. 前端构建
      - name: Frontend install & build
        working-directory: frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # 5. 复制前端产物到 backend/web
      - name: Copy frontend dist
        run: |
          mkdir -p backend/web
          cp -r frontend/dist/* backend/web/

      # 6. 后端依赖安装和构建
      - name: Backend setup
        working-directory: backend
        run: |
          # 安装所有依赖
          pnpm install --frozen-lockfile
          # 构建 TypeScript 项目
          pnpm run build:prod
          # 验证 main.js 文件是否存在
          ls -la dist/
          # 检查文件是否存在
          if [ ! -f "dist/main.js" ]; then
            echo "Error: dist/main.js does not exist after build!"
            exit 1
          fi

      # 7. 安装生产依赖和 pkg
      - name: Backend prod dependencies
        working-directory: backend
        run: |
          # 安装生产依赖
          pnpm install --production --shamefully-hoist
          # 安装 @yao-pkg/pkg
          pnpm add -D @yao-pkg/pkg
          # 重建原生模块
          pnpm rebuild better-sqlite3

      # 8. 后端构建和编译原生模块
      - name: Backend install & build
        working-directory: backend
        run: |
          pnpm install --frozen-lockfile
          pnpm run build:prod
          # 编译 better-sqlite3 原生模块
          echo "编译 better-sqlite3 原生模块..."
          pnpm rebuild better-sqlite3
          # 验证编译结果
          echo "better-sqlite3 编译结果:"
          find node_modules/better-sqlite3 -name "*.node" 2>/dev/null | head -5 || echo "未找到 .node 文件"

      # 9. 准备后端文件到 dist 目录
      - name: Prepare backend files
        run: |
          # 复制后端构建产物
          cp -r backend/dist/* dist/
          # 复制配置文件
          for file in package.json pnpm-lock.yaml .env.production; do
            if [ -f "backend/$file" ]; then
              cp "backend/$file" "dist/$file"
            fi
          done
          # 复制编译好的 better-sqlite3 模块
          echo "复制 better-sqlite3 原生模块..."
          mkdir -p dist/node_modules/better-sqlite3
          if [ -d "backend/node_modules/better-sqlite3" ]; then
            cp -r backend/node_modules/better-sqlite3/* dist/node_modules/better-sqlite3/
            echo "better-sqlite3 复制完成"
          else
            echo "警告: backend/node_modules/better-sqlite3 目录不存在"
          fi

      # 10. 安装生产依赖和准备 pkg
      - name: Prepare for pkg packaging
        working-directory: dist
        run: |
          # 安装生产依赖
          pnpm install --production --shamefully-hoist
          # 安装 @yao-pkg/pkg
          pnpm add -D @yao-pkg/pkg

          # 验证 better-sqlite3 是否存在
          echo "验证 better-sqlite3 模块:"
          find node_modules/better-sqlite3 -name "*.node" 2>/dev/null | head -5 || echo "未找到 .node 文件"
      # 11. 上传产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/server${{ matrix.ext }}
          retention-days: 7