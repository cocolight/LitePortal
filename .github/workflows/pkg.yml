name: Build Native Executables

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  pkg:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: node22-linux-x64
            ext: ''
            artifact_name: server-linux
          - os: macos-latest
            target: node22-macos-x64
            ext: ''
            artifact_name: server-macos
          - os: windows-latest
            target: node22-win-x64
            ext: .exe
            artifact_name: server-windows

    runs-on: ${{ matrix.os }}

    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 安装 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # 3. 安装 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: |
            frontend/pnpm-lock.yaml
            backend/pnpm-lock.yaml

      # 4. 前端构建
      - name: Frontend install & build
        working-directory: frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # 5. 复制前端产物到 backend/web
      - name: Copy frontend dist
        run: |
          mkdir -p backend/web
          cp -r frontend/dist/* backend/web/

      # 6. 后端依赖安装和构建
      - name: Backend setup
        working-directory: backend
        run: |
          # 安装所有依赖
          pnpm install --frozen-lockfile
          # 构建 TypeScript 项目
          pnpm run build:prod
          # 验证 main.js 文件是否存在
          ls -la dist/
          # 检查文件是否存在
          if [ ! -f "dist/main.js" ]; then
            echo "Error: dist/main.js does not exist after build!"
            exit 1
          fi

      # 7. 安装生产依赖和 pkg
      - name: Backend prod dependencies
        working-directory: backend
        run: |
          # 安装生产依赖
          pnpm install --production --shamefully-hoist
          # 安装 @yao-pkg/pkg
          pnpm add -D @yao-pkg/pkg
          # 重建原生模块
          pnpm rebuild better-sqlite3

      # 8. 配置 package.json 用于 pkg
      - name: Configure package.json for pkg
        working-directory: backend
        run: |
          # 创建备份
          cp package.json package.json.backup

          # 使用 jq 正确配置 pkg
          jq '. + {
            "bin": "dist/main.js",
            "pkg": {
              "targets": ["${{ matrix.target }}"],
              "outputPath": "../dist",
              "assets": [
                "dist/**/*",
                "web/**/*",
                "node_modules/better-sqlite3/**/*",
                "node_modules/**/*.node",
                "package.json"
              ]
            }
          }' package.json > package.json.tmp && mv package.json.tmp package.json

          # 验证配置
          echo "Updated package.json content:"
          cat package.json | jq '.bin'
          cat package.json | jq '.pkg'

      # 9. 使用 @yao-pkg/pkg 打包
      - name: Package with @yao-pkg/pkg
        working-directory: backend
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Files in dist directory:"
          ls -la dist/ || echo "dist directory does not exist"

          # 使用 pkg 打包
          npx pkg . --target ${{ matrix.target }} --output ../dist/server${{ matrix.ext }}

      # 10. 验证生成的可执行文件
      - name: Verify executable
        run: |
          echo "Generated files in dist:"
          ls -la dist/
          file dist/server${{ matrix.ext }} || echo "Cannot check file type"

      # 11. 上传产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/server${{ matrix.ext }}
          retention-days: 7